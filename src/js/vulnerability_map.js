// Vulnerability heatmap showing countries colored by number of submarine cables

import { DATA_URLS } from './config.js';

export async function initVulnerabilityMap() {
  try {
    console.log('Starting vulnerability map initialization...');
    console.log('Fetching from:', DATA_URLS.ALL_CABLE_COUNTRIES);
    
    // Load comprehensive cable country data (includes all countries with cables)
    const allCablesResp = await fetch(DATA_URLS.ALL_CABLE_COUNTRIES);
    console.log('Response status:', allCablesResp.status);
    
    if (!allCablesResp.ok) {
      throw new Error(`Failed to fetch cable countries: ${allCablesResp.status}`);
    }
    
    const allCablesData = await allCablesResp.json();
    console.log('Loaded cable data for', Object.keys(allCablesData).length, 'countries');
    
    // Create lookup for country cable counts
    const countryCableCounts = {};
    for (const [countryCode, data] of Object.entries(allCablesData)) {
      countryCableCounts[countryCode] = data.cable_count;
    }
    
    // Build the Vega-Lite specification
    const spec = {
      $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
      width: 1000,
      height: 480,
      projection: {
        type: 'equalEarth'
      },
      layer: [
        // Base world map - countries without data
        {
          data: {
            url: 'https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json',
            format: { type: 'topojson', feature: 'countries' }
          },
          mark: {
            type: 'geoshape',
            fill: '#f3f4f6',
            stroke: '#d1d5db',
            strokeWidth: 0.5
          }
        },
        // Countries with cable data - colored by vulnerability
        {
          data: {
            url: 'https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json',
            format: { type: 'topojson', feature: 'countries' }
          },
          transform: [
            {
              lookup: 'properties.name',
              from: {
                data: { values: buildCountryLookupData(countryCableCounts) },
                key: 'country_name',
                fields: ['cable_count', 'country_code']
              }
            },
            {
              filter: 'datum.cable_count != null && datum.cable_count > 0'
            }
          ],
          mark: {
            type: 'geoshape',
            stroke: '#fff',
            strokeWidth: 0.5
          },
          encoding: {
            color: {
              field: 'cable_count',
              type: 'quantitative',
              scale: {
                type: 'threshold',
                domain: [1, 3, 5, 10, 20, 30],
                range: ['#dbeafe', '#bfdbfe', '#93c5fd', '#60a5fa', '#3b82f6', '#2563eb', '#1d4ed8']
              },
              legend: {
                title: 'Number of Submarine Cables',
                orient: 'bottom-right',
                direction: 'horizontal',
                gradientLength: 300
              }
            },
            tooltip: [
              { field: 'properties.name', title: 'Country', type: 'nominal' },
              { field: 'cable_count', title: 'Submarine Cables', type: 'quantitative' }
            ]
          }
        },
        // Submarine cables overlay - colored by capacity era
        {
          data: {
            url: DATA_URLS.SUBMARINE_CABLES,
            format: { type: 'json', property: 'features' }
          },
          transform: [
            {
              calculate: "datum.properties.rfs ? toNumber(substring(datum.properties.rfs, length(datum.properties.rfs) - 4)) : 1990",
              as: 'build_year'
            },
            {
              calculate: "datum.build_year < 2000 ? 'Pre-2000' : datum.build_year < 2010 ? '2000-2009' : datum.build_year < 2020 ? '2010-2019' : '2020+'",
              as: 'capacity_era'
            }
          ],
          mark: {
            type: 'geoshape',
            strokeWidth: 1.2,
            fill: null,
            opacity: 0.6
          },
          encoding: {
            stroke: {
              field: 'capacity_era',
              type: 'nominal',
              scale: {
                domain: [
                  'Pre-2000',
                  '2000-2009',
                  '2010-2019',
                  '2020+'
                ],
                range: ['#440154', '#31688e', '#35b779', '#fde724']
              },
              legend: {
                title: 'Cable Capacity by Era',
                orient: 'bottom-left',
                direction: 'vertical'
              }
            }
          }
        },
        // Thicker invisible layer for cable tooltips
        {
          data: {
            url: DATA_URLS.SUBMARINE_CABLES,
            format: { type: 'json', property: 'features' }
          },
          transform: [
            {
              calculate: "datum.properties.name || 'Unknown Cable'",
              as: 'cable_name'
            },
            {
              calculate: "datum.properties.rfs || 'Unknown'",
              as: 'rfs_date'
            },
            {
              calculate: "datum.properties.rfs ? toNumber(substring(datum.properties.rfs, length(datum.properties.rfs) - 4)) : 1990",
              as: 'build_year'
            },
            {
              calculate: "datum.build_year < 2000 ? 'Pre-2000' : datum.build_year < 2010 ? '2000-2009' : datum.build_year < 2020 ? '2010-2019' : '2020+'",
              as: 'capacity_era'
            }
          ],
          mark: {
            type: 'geoshape',
            stroke: 'transparent',
            strokeWidth: 10,
            fill: 'transparent'
          },
          encoding: {
            tooltip: [
              { field: 'cable_name', title: 'Cable', type: 'nominal' },
              { field: 'capacity_era', title: 'Capacity Era', type: 'nominal' },
              { field: 'rfs_date', title: 'Ready for Service', type: 'nominal' }
            ]
          }
        }
      ]
    };
    
    await vegaEmbed('#vulnerabilityMap', spec, { actions: false });
    console.log('Vulnerability map initialized');
    
  } catch (e) {
    console.error('Error initializing vulnerability map:', e);
  }
}

// Helper function to build country lookup data
// Maps country names to our country codes and cable counts
function buildCountryLookupData(countryCableCounts) {
  // Mapping of our country codes to standard country names used in world atlas
  const countryCodeToName = {
    'AU': 'Australia',
    'US': 'United States of America',
    'CA': 'Canada',
    'BR': 'Brazil',
    'MX': 'Mexico',
    'FR': 'France',
    'CH': 'Switzerland',
    'NL': 'Netherlands',
    'DE': 'Germany',
    'IT': 'Italy',
    'PL': 'Poland',
    'NO': 'Norway',
    'SE': 'Sweden',
    'IE': 'Ireland',
    'GB': 'United Kingdom',
    'NZ': 'New Zealand',
    'JP': 'Japan',
    'KR': 'South Korea',
    'IN': 'India',
    'CN': 'China',
    'MY': 'Malaysia',
    'SG': 'Singapore',
    'IL': 'Israel',
    'QA': 'Qatar',
    'AE': 'United Arab Emirates',
    'ZA': 'South Africa',
    'ID': 'Indonesia',
    'GH': 'Ghana',
    'CZ': 'Czechia',
    'RU': 'Russia',
    'ES': 'Spain',
    'AT': 'Austria',
    'DK': 'Denmark',
    'SL': 'Slovenia',
    'UA': 'Ukraine',
    'BE': 'Belgium',
    'PT': 'Portugal',
    'FI': 'Finland',
    'HU': 'Hungary',
    'CO': 'Colombia',
    'AR': 'Argentina',
    'LU': 'Luxembourg',
    'TH': 'Thailand',
    'TR': 'Turkey',
    'RO': 'Romania',
    'BG': 'Bulgaria',
    'CL': 'Chile',
    'IS': 'Iceland',
    'CN-TW': 'Taiwan',
    'PA': 'Panama',
    'GT': 'Guatemala',
    'MA': 'Morocco',
    'PE': 'Peru',
    'TZ': 'Tanzania',
    'GR': 'Greece',
    'LV': 'Latvia',
    'HR': 'Croatia',
    'PH': 'Philippines',
    'UY': 'Uruguay',
    'PR': 'Puerto Rico',
    'LT': 'Lithuania',
    'KA': 'Kazakhstan',
    'PK': 'Pakistan',
    'CY': 'N. Cyprus',
    'AL': 'Albania',
    'NG': 'Nigeria',
    'GE': 'Georgia',
    'MG': 'Madagascar',
    'TN': 'Tunisia',
    'LB': 'Lebanon',
    'SD': 'Sudan',
    'EG': 'Egypt',
    'VN': 'Vietnam',
    'SA': 'Saudi Arabia',
    'KE': 'Kenya',
    'BD': 'Bangladesh',
    'HN': 'Honduras',
    'EC': 'Ecuador',
    'UG': 'Uganda',
    'DZ': 'Algeria',
    'VE': 'Venezuela',
    // New countries from comprehensive scan
    'AO': 'Angola',
    'BJ': 'Benin',
    'BN': 'Brunei',
    'BS': 'Bahamas',
    'BZ': 'Belize',
    'CD': 'Dem. Rep. Congo',
    'CG': 'Congo',
    'CI': 'CÃ´te d\'Ivoire',
    'CM': 'Cameroon',
    'CR': 'Costa Rica',
    'CU': 'Cuba',
    'DJ': 'Djibouti',
    'DO': 'Dominican Rep.',
    'EE': 'Estonia',
    'ER': 'Eritrea',
    'FJ': 'Fiji',
    'GA': 'Gabon',
    'GL': 'Greenland',
    'GN': 'Guinea',
    'GY': 'Guyana',
    'HT': 'Haiti',
    'IR': 'Iran',
    'JM': 'Jamaica',
    'KH': 'Cambodia',
    'KW': 'Kuwait',
    'LK': 'Sri Lanka',
    'LR': 'Liberia',
    'LY': 'Libya',
    'MM': 'Myanmar',
    'MR': 'Mauritania',
    'MZ': 'Mozambique',
    'NA': 'Namibia',
    'NC': 'New Caledonia',
    'NI': 'Nicaragua',
    'OM': 'Oman',
    'PG': 'Papua New Guinea',
    'SB': 'Solomon Is.',
    'SN': 'Senegal',
    'SO': 'Somalia',
    'SR': 'Suriname',
    'SY': 'Syria',
    'TG': 'Togo',
    'TT': 'Trinidad and Tobago',
    'YE': 'Yemen'
  };
  
  const lookupData = [];
  for (const [code, count] of Object.entries(countryCableCounts)) {
    const countryName = countryCodeToName[code];
    if (countryName) {
      lookupData.push({
        country_name: countryName,
        country_code: code,
        cable_count: count
      });
    }
  }
  
  return lookupData;
}

